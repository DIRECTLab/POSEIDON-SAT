# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# Augmented ShipRSImageNet Dataset
# Example usage: yolo train data=ShipRSImageNet_V1_Augmented.yaml
# parent
# â””â”€â”€ datasets
#     â””â”€â”€ ShipRSImageNet_V1_Augmented


# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/ShipRSImageNet_V1_Augmented
train: # train images (relative to 'path')  16551 images
  - images/train
val: # val images (relative to 'path')  4952 images
  - images/val
# Labels for test images were not published
#test: # test images (optional)
#  - images/test

names:
  0: 'Other Ship'
  1: 'Warship'
  2: 'Other Merchant'
  3: 'Container Ship'
  4: 'Cargo Ship'
  5: 'Barge'
  6: 'Fishing Vessel'
  7: 'Oil Tanker'
  8: 'Motorboat'
  9: 'Dock'


# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  # Adapted from https://github.com/ultralytics/ultralytics/blob/f8e681c2be251562633d424f4a1a1cc7da526bed/ultralytics/data/converter.py - AGPL-3.0 License

  import re
  import json
  import shutil
  from collections import defaultdict
  from pathlib import Path

  import numpy as np

  from ultralytics.utils import LOGGER, TQDM
  
  class_mapping_overrides = {
    **{x: 1 for x in range(3, 37)},
    37: 2,
    38: 3,
    39: 2,
    40: 4,
    41: 5,
    **{x: 2 for x in range(42,46)},
    46: 6,
    47: 7,
    48: 2,
    49: 8,
    50: 9,
  }
  
  
  def convert_coco(
      labels_dir="../coco/annotations/",
      images_dir="../coco/images/",
      save_dir="coco_converted/",
      class_map_override={},
  ):
      # Create dataset directory
      save_dir = Path(save_dir)
      for p in save_dir / "labels", save_dir / "images":
          p.mkdir(parents=True, exist_ok=True)  # make dir
  
      # Import json
      for split in "train", "val":
          json_file = Path(labels_dir).resolve() / f"ShipRSImageNet_bbox_{split}_level_3.json"
          fn = Path(save_dir) / "labels" / re.sub('_level_\d$', '', json_file.stem.replace("ShipRSImageNet_bbox_", ""))  # folder name
          fn.mkdir(parents=True, exist_ok=True)
          with open(json_file) as f:
              data = json.load(f)
  
          # Create image directory
          image_out_path = Path(save_dir) / "images" / split
          image_out_path.mkdir(parents=True, exist_ok=True)
  
          # Create image dict
          images = {f'{x["id"]:d}': x for x in data["images"]}
          # Create image-annotations dict
          imgToAnns = defaultdict(list)
          for ann in data["annotations"]:
              imgToAnns[ann["image_id"]].append(ann)
          # Copy Images
          for img in data["images"]:
              shutil.move(Path(images_dir) / img["file_name"], image_out_path / img["file_name"])
  
          # Write labels file
          for img_id, anns in TQDM(imgToAnns.items(), desc=f"Annotations {json_file}"):
              img = images[f"{img_id:d}"]
              h, w, f = img["height"], img["width"], img["file_name"]
  
              bboxes = []
              for ann in anns:
                  # The COCO box format is [top left x, top left y, width, height]
                  box = np.array(ann["bbox"], dtype=np.float64)
                  box[:2] += box[2:] / 2  # xy top-left corner to center
                  box[[0, 2]] /= w  # normalize x
                  box[[1, 3]] /= h  # normalize y
                  if box[2] <= 0 or box[3] <= 0:  # if w <= 0 and h <= 0
                      continue
  
                  coco_cls = ann["category_id"]
                  if coco_cls in class_map_override:
                      cls = class_map_override[coco_cls]
                  else:
                      cls = coco_cls - 1  # class
                  box = [cls] + box.tolist()
                  if box not in bboxes:
                      bboxes.append(box)
  
              # Write
              with open((fn / f).with_suffix(".txt"), "a") as file:
                  for i in range(len(bboxes)):
                      line = (
                          *(bboxes[i]),
                      )  # cls, box or segments
                      file.write(("%g " * len(line)).rstrip() % line + "\n")
  
  
  convert_coco(yaml["path"], Path(yaml["path"]) / "images", yaml["path"], class_mapping_overrides)